[[_first_time]]
=== First-Time Git Setup

Now that you've installed Git, there are a few commands to run to customize your Git environment.
You only have to run these once per computer, and they stick around between upgrades.
You can also change them at any time by running the commands again, supplying
different options.

`git config` sets and shows these values, which are stored
in one or more of the following files:

1. `/etc/gitconfig`: holds values used by for every user and all repositories on the system.
  Git uses this file when you run `git config --system`.
  (You need superuser privilege to make changes to it.)
2. `~/.gitconfig` or `~/.config/git/config`: user specific values for all repositories on the system.
  Git uses this file when you run `git config --global`.
3. `.git/config`: values specific to the current repository.

Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.

On Windows, Git looks for `.gitconfig` in `$HOME` (`C:\Users\$USER`).
If you're using version 2.x or later of Git for Windows, there's also a system-level config file at
`C:\Documents and Settings\All Users\Application Data\Git\config` on Windows XP, and in `C:\ProgramData\Git\config` on Windows Vista and newer.
This config file can only be changed by running `git config -f <file>` as an admin.

You can view all of your settings and where they are coming from by running

[source,console]
----
$ git config --list --show-origin
----

==== Your Identity

The first thing you should do after installing Git is to set your user name and email address.
This is important because every Git commit uses this information.

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Again, you only need to run these once, because Git uses these values everywhere
you work since you supplied the `--global` flag.
To set a different name or email address for a specific project, run `git config` without `--global` when you're
in the project's working directory.

Many of the GUI tools help you set these values the first time you run them.

==== Your Editor

Now that you've set up your identity, configure the default text editor Git uses when you enter a message.
If not configured, Git uses your system's default editor.
To use a different editor, such as `emacs`, run

[source,console]
----
$ git config --global core.editor emacs
----

On Windows, to use a different text editor, such as Notepad++, specify the full path to its executable file.

On x86
[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

On x64
[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[WARNING]
====
`vim` and `emacs` are popular text editors often used on Unix-based systems, like Linux and MacOS.
If you aren't familiar with either of these editors or are using Windows, you need to learn
how to set up your favorite text editor with Git.
If you don't set an editor and you don't know `vim` or `emacs`, you'll likely get into a
really confused state when they're launched.

====

==== Checking Your Configuration

To check your configuration values, run `git config --list` to list all the values currently in effect.

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

A value might appear more than once if Git finds it in more than one file (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value shown.

You can also check a specific value by running `git config <value>`.(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Since the same configuration value might be set in more than one configuration file,
you might find that Git uses a value that you didn't expect.
If this happens, Git can show you which configuration file that value came from.
====

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
