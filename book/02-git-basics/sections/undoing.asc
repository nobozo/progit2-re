[[_undoing]]
=== Undoing Things

You may find that you've changed your mind and want to undo a change.
We review a few methods for doing so now.
Be careful, because you can't always undo what you undo.
This is one of the few areas in Git where you may lose work if you make a mistake.

One common undo situation is when you commit too early and forget to add some files,
or you mess up your commit message. To try that commit again, run

[source,console]
----
$ git commit --amend
----

If you've made no changes since your last commit (for instance, you run this command immediately after your
previous commit), then your snapshot looks exactly the same, and all you change is the commit message.

The editor starts, containing the commit message from your previous commit.
Editing and saving the message overwrites the previous message.

As an example, if you commit and then realize you forgot to stage a file you wanted to add to the commit, run

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

You end up with a single commit -- the second commit replaces the first.

[NOTE]
====
Remember that when you amend your last commit, you're not really fixing it.
Instead you're _replacing_ the old commit entirely with a new commit.
It's as if the previous commit never happened, and it won't be in your repository.

The obvious value to amending commits is to improve your last commit, without cluttering your repository history with commit messages of the form, ``Oops, forgot to add a file'' or ``Darn, fixing a typo in last commit''.
====

[[_unstaging]]
==== Unstaging a Staged File

The next two sections demonstrate how to manage your staging area and working directory.
The nice part is that when `git status` shows the state of these areas it also reminds you how to undo changes to them.
For example, let's say you've changed two files and want to save them in two separate commits,
but you accidentally run `git add *` and stage them both. How can you unstage one of them?
`git status` reminds you.

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Right below the `Changes to be committed:` section, you see `(use "git reset HEAD <file>..." to unstage)`.
So, let's follow that advice to unstage `CONTRIBUTING.md`.

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

The command looks a bit strange, but it works.
The modified version of `CONTRIBUTING.md` remains in the working directory but once again is unstaged.

[NOTE]
=====
`git reset` _can_ be dangerous if you run it with the `--hard` flag because it can change files in your working directory.
=====

For now this magic invocation is all you need to know about `git reset`. We go into much more detail about what it does and how to get it to do really interesting things in <<ch07-git-tools#_git_reset>>.

==== Unmodifying a Modified File

What if you realize that you don't want to keep your changes to `CONTRIBUTING.md`?
How can you unmodify it -- that is, revert it back to what it looked like before you changed it?
Luckily, `git status` tells you how to do that too.
In the last example, the unstaged output area looks like

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

This tells you exactly how to discard the changes you've made.
Let's do what it says.

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

You can see that the changes have been reverted.

[IMPORTANT]
=====
It's important to understand that `git checkout -- <file>` is a dangerous command. Any local changes in
the working directory you made to that file are gone.
Git just copied the most recently-committed version of that file over it.
Don't ever use this command unless you're absolutely sure you no longer want the unsaved local changes.
=====

To keep the changes you've made to a file but get it out of the way for now, read about
stashing and branching in <<ch03-git-branching#ch03-git-branching>>.
There are generally better ways to accomplish this
than reverting.

Remember, anything that's _committed_ in Git can almost always be recovered.
Even commits that were deleted or were overwritten with the `--amend` flag can be recovered
(see <<ch10-git-internals#_data_recovery>> for data recovery).
However, anything you lose that was never committed is likely never to be seen again.
