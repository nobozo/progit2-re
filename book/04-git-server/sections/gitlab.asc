=== GitLab

(((serving repositories, GitLab)))(((GitLab)))
GitWeb is pretty simplistic though.
For a more modern, fully featured Git server, there are several open source solutions available.
GitLab is one of the more popular ones, so we cover installing and using it.
It's a bit more complex than GitWeb and likely requires more maintenance, but it's a much more fully featured option.

==== Installation

GitLab is a database-backed web application, so its installation is a bit more involved than most other Git servers.
Fortunately, this process is very well-documented.

There are several ways to install GitLab.
To get something up and running quickly, download a virtual machine image or a one-click installer
from https://bitnami.com/stack/gitlab[], and tweak the configuration to match your particular environment.(((bitnami)))
One nice touch Bitnami has included is the login page (accessed by typing alt+â†’) which shows the IP address,
the default username, and password for the installed GitLab.

[[bitnami]]
.The Bitnami GitLab virtual machine login screen.
image::images/bitnami.png[The Bitnami GitLab virtual machine login screen.]

For anything else, follow the guidance in the GitLab Community Edition readme
at https://gitlab.com/gitlab-org/gitlab-ce/tree/master[].
There you find assistance for installing GitLab using Chef recipes, a virtual machine on Digital Ocean,
and RPM and DEB packages.
There's also guidance on getting GitLab running with non-standard operating systems and databases,
a fully-manual installation script, and many other topics.

==== Administration

GitLab administration is done over the web.
Simply point your browser to the hostname or IP address where GitLab is installed, and log in as an admin user.
The default username is `admin@local.host`, and the default password is `5iveL!fe` (which
you're prompted to change as soon as you enter it).
Once logged in, click the `Admin area` icon in the menu at the top right.

[[gitlab_menu]]
.The `Admin area` item in the GitLab menu.
image::images/gitlab-menu.png[The `Admin area` item in the GitLab menu.]

===== Users

A user in GitLab is an account for a single person.
User accounts don't have a lot of complexity. They're mainly a collection of personal information.
Each user account comes with a *namespace*, which is a grouping of projects that belong to that user.
If the user `jane` had a project named +project+, that project's URL would be `http://server/jane/project`.

[[gitlab_users]]
.The GitLab user administration screen.
image::images/gitlab-users.png[The GitLab user administration screen.]

Removing a user can be done in two ways.
`Blocking` a user prevents them from logging into GitLab, but all of the data in that user's namespace
is preserved, and commits signed with that user's email address still link back to their account.

`Destroying` a user, on the other hand, completely removes them from the database and filesystem.
All projects and data in their namespace are removed, and any groups they own are also removed.
This is obviously a much more permanent and destructive action, and it's rarely used.

[[_gitlab_groups_section]]
===== Groups

A GitLab group is a collection of projects, along with data about which users can access those projects, and how.
Each group has a project namespace (the same way that users do), so if the group `training` has a project `materials`,
its URL would be `http://server/training/materials`.

[[gitlab_groups]]
.The GitLab group administration screen.
image::images/gitlab-groups.png[The GitLab group administration screen.]

Each group is associated with a number of users, and each user has a level of permissions for the group's projects
and the group itself. These permissions range from `Guest` (issues and chat only) to `Owner` (full control of the group,
its members, and its projects). The types of permissions are too numerous to list here,
but GitLab has a helpful link on the administration page.

===== Projects

A GitLab project roughly corresponds to a single Git repository.
Every project belongs to a single namespace, either a user or a group namespace.
If the project belongs to a user, the user who owns the project has direct control over who has access to the project.
If the project belongs to a group, the group's user-level permissions also take effect.

Every project also has a visibility level, which controls who has read access to that project's pages and repository.
If a project is _Private_, the project's owner must explicitly grant access to specific users.
An _Internal_ project is visible to any logged-in user, and a _Public_ project is visible to anyone.
Note that this controls both `git fetch` access as well as access to the web UI for that project.

===== Hooks

GitLab includes support for hooks, both at a project or system level.
In either case, the GitLab server performs an HTTP POST request, with some descriptive JSON, whenever relevant events occur.
This is a great way to connect your Git repositories and GitLab instance to the rest of your development automation tools,
such as CI servers, chat rooms, and deployment tools.

==== Basic Usage

The first thing to do with GitLab is to create a new project
by clicking the `+` icon on the toolbar.
You're asked for the project's name, which namespace it should belong to, and what its visibility level should be.
Most of what you specify here isn't permanent, and can be changed later using the settings interface.
Click `Create Project` and you're done.

Once the project exists, connect it with a local Git repository.
Each project is accessible over HTTPS or SSH, either of which can be used to specify a Git remote.
The URLs are visible at the top of the project's home page.
For an existing local repository, this command creates a remote named `gitlab` on the hosted location.

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

If you don't have a local copy of the repository, simply run

[source,console]
----
$ git clone https://server/namespace/project.git
----

The web UI provides access to several useful views of the repository itself.
Each project's home page shows recent activity, and links along the top leads you to views of the project's files
and commit log.

==== Working Together

The simplest way of working together on a GitLab project is by giving another user push access to the Git repository.
Add a user to a project by going to the `Members` section of that project's settings, and associating the new
user with an access level (the different access levels are discussed a bit in <<_gitlab_groups_section>>).
By giving a user an access level of `Developer` or above, that user can push commits and branches directly to the repository.

Another, more decoupled, way of collaboration is by using merge requests.
This feature enables any user that can see a project to contribute to it in a controlled way.
Users with direct access can simply create a branch, push commits to it, and open a merge request from their
branch back into `master` or any other branch on the GitLab server.
Users who don't have push permission for a repository can `fork` it (create their own copy), push commits to _that_ copy,
and open a merge request from their fork back to the main project.
This model allows the owner to be in full control of what goes into the repository and when, while allowing
contributions from untrusted users.

Merge requests and issues are the main units of long-lived discussions in GitLab.
Each merge request allows a line-by-line discussion of the proposed change (which supports a lightweight kind
of code review), as well as a general overall discussion thread.
Both can be assigned to users, or organized into milestones.

This section is focused mainly on the Git-related features of GitLab, but as a mature project,
it provides many other features to help your team work together, such as project wikis and system maintenance tools.
One benefit to GitLab is that, once the server is set up and running, you rarely need to tweak a configuration
file or access the server via SSH. Most administration and general usage can be accomplished through the web UI.
