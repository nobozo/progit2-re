==== Git and Bazaar

Another famous DVCS is http://bazaar.canonical.com[Bazaar].
Bazaar is free and open source, and is part of the https://www.gnu.org[GNU Project].
It behaves very differently from Git.
Sometimes, to do the same thing as with Git, you have to use a different keyword,
and some keywords they have in common don't have the same meaning.
In particular, branch management is very different and may cause confusion,
especially for someone used to Git.
Nevertheless, it is possible to work on a Bazaar repository from Git.

There are many projects that allow you to use Git as a Bazaar client.
Here we'll use Felipe Contreras' project that you may find at https://github.com/felipec/git-remote-bzr[].
To install it, download the file `git-remote-bzr` into a folder contained in your `$PATH`.
[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

You also need to have Bazaar installed.
That's all!

===== Create a Git repository from a Bazaar repository

It's simple to use.
To clone a Bazaar repository just prefix the URL with `bzr::`.
Since Git and Bazaar both create full local clones, it's possible to connect a Git clone to your
local Bazaar clone, but it isn't recommended.
It's much easier to attach your Git clone directly to the same place your Bazaar clone is attached to -- the
central repository.

Let's suppose that you're working with the remote repository `bzr+ssh://developer@mybazaarserver:myproject`.
Clone it by running
[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

At this point, your Git repository is created but isn't compacted, resulting in sub-optimal disk use.
That's why you should also clean and compact your Git repository, especially if it's large.
[source,console]
----
$ git gc --aggressive
----

===== Bazaar branches

Bazaar only allows branches to be cloned, but a repository may contain several branches,
and `git-remote-bzr` can clone both. For example, to clone a branch run
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

And to clone the whole repository run
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

The second command clones all the branches contained in the emacs repository. Nevertheless, it's
possible to select certain branches.
[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Some remote repositories don't allow you to list their branches, in which case you must manually
specify the branches. Even though you could specify the configuration in the cloning command,
you may find this easier.

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Ignore what's ignored with .bzrignore

Since you're working on a project managed by Bazaar, you shouldn't create a `.gitignore` file
because you _may_ accidentally put it under version control which would disturb the other people working with Bazaar.
The solution is to create the `.git/info/exclude` file either as a symbolic link or as a regular file.
We'll see later how to solve this problem.

Bazaar uses the same model as Git to ignore files, but also has two features which don't have
an equivalent in Git.
The complete description may be found in
http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[the documentation].
The two features are

1. "!!" allows you to ignore certain file patterns even if they're specified using a "!" rule.
2. "RE:" at the beginning of a line allows you to specify
a https://docs.python.org/3/library/re.html[Python regular expression] (Git only allows shell globs).

As a consequence, there are two different situations to consider.

1. If `.bzrignore` doesn't contain any of these two specific prefixes, then you can simply make
a symbolic link to it in the repository by running `ln -s .bzrignore .git/info/exclude`
2. Otherwise, you must create `.git/info/exclude` and modify it to ignore exactly
the same files in `.bzrignore`.

Whatever the case, you have to remain vigilant against any change of `.bzrignore` to make sure
that `.git/info/exclude` always reflects `.bzrignore`.
Indeed, if `.bzrignore` were to change and contained one or more lines starting with "!!" or "RE:",
Git isn't  able to interpret these lines. So,  you must adapt `.git/info/exclude` to ignore the same
files as the ones ignored with `.bzrignore`.
Moreover, if `.git/info/exclude` is a symbolic link, you must first delete the symbolic link,
copy `.bzrignore` to `.git/info/exclude`, and then adapt the latter.
However, be careful doing this because with Git it's impossible to re-include a file if
a parent directory of that file is excluded.

===== Fetch the changes of the remote repository

To fetch the changes of the remote, pull changes as usual, using Git commands.
Supposing that your changes are on `master`, merge or rebase your work on `origin/master`.

[source,console]
----
$ git pull --rebase origin
----

===== Push your work on the remote repository

Because Bazaar also has the concept of merge commits, there will be no problem if you push a merge commit.
So, you can work on a branch, merge the changes into `master`, and push.
Then, create your branches, test, and commit your work as usual.
Finally push your work to the Bazaar repository.
[source,console]
----
$ git push origin master
----

===== Caveats

Git's remote-helpers framework has some limitations.
In particular, these commands don't work:

* git push origin :branch-to-delete (Bazaar can't accept ref deletions in this way.)
* git push origin old:new (it will push 'old')
* git push --dry-run origin branch (it will push)

===== Summary

Since Git's and Bazaar's models are similar, there isn't a lot of resistance when crossing the boundary.
As long as you watch out for the limitations, and you're always aware that the remote repository isn't really
Git, you'll be fine.
