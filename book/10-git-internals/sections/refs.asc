[[_git_refs]]
=== Git References

If you were interested in seeing the history of your repository reachable from a specific commit, say, `1a410e`,
you could run something like `git log 1a410e`, but you would have to remember that `1a410e` is the
commit you want to use as the starting point. Instead, it would be easier if there were a file in which
you could store that SHA-1 value, using a simple filename you could use instead of the raw SHA-1 value.

In Git, these are called `references` or `refs`. You can find the files that contain the SHA-1 hashes
in the `.git/refs` directory. In the current project, this directory contains no files, but it's organized
in a simple structure.

[source,console]
----
$ find .git/refs
.git/refs
.git/refs/heads
.git/refs/tags
$ find .git/refs -type f
----

To create a new reference that helps you remember where your latest commit is, you can technically run
something as simple as

[source,console]
----
$ echo 1a410efbd13591db07496601ebc7a059dd55cfe9 > .git/refs/heads/master
----

Now, you can use the `master` reference you just created instead of the SHA-1 hash in your Git commands.

[source,console]
----
$ git log --pretty=oneline master
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

You aren't encouraged to directly edit the reference files.
Instead, Git provides the `git update-ref` command to update a reference.

[source,console]
----
$ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9
----

That's basically what a branch in Git is -- a simple reference to the head of a line of work.
This reference is just an SHA-1 hash. To create a branch called `test` back at the second commit, run

[source,console]
----
$ git update-ref refs/heads/test cac0ca
----

Your branch contains only work starting from that commit back to the first commit.

[source,console]
----
$ git log --pretty=oneline test
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

Now, your Git repository conceptually looks something like

.Git directory objects with branch head references included.
image::images/data-model-4.png[Git directory objects with branch head references included.]

When you run commands like `git branch (branchname)`, Git basically runs `git update-ref` to add the SHA-1
hash of the last commit of the branch you're on into whatever new reference you want to create.

[[_the_head]]
==== The HEAD

The question now is, when you run `git branch (branchname)`, how does Git know the SHA-1 hash of the last commit?
The answer is the `HEAD` file.

The `HEAD` file is a symbolic reference to the branch you're currently on.
By symbolic reference, we mean that unlike a normal reference, it doesn't contain an SHA-1 hash
but rather the name of another reference. If you look at the file, you see something like

[source,console]
----
$ cat .git/HEAD
ref: refs/heads/master
----

If you run `git checkout test`, Git updates the file to look like

[source,console]
----
$ cat .git/HEAD
ref: refs/heads/test
----

When you run `git commit`, Git creates the commit object, specifying the parent of that commit object to be whatever
SHA-1 hash the reference in `HEAD` points to.

You can also manually edit this file, but again a safe command exists -- `git symbolic-ref`.
You can output the value of `HEAD` by running

[source,console]
----
$ git symbolic-ref HEAD
refs/heads/master
----

You can also set the value of `HEAD`.

[source,console]
----
$ git symbolic-ref HEAD refs/heads/test
$ cat .git/HEAD
ref: refs/heads/test
----

You can't set a symbolic reference using any other string format.

[source,console]
----
$ git symbolic-ref HEAD test
fatal: Refusing to point HEAD outside of refs/
----

==== Tags

We just finished discussing Git's three main object types, but there's a fourth.
The tag object is very much like a commit object -- it contains the name of the person creating the tag,
a date, a message, and a reference. The main difference is that a tag object generally points to a commit
rather than a tree. It's like a branch reference, but it never moves. It always points to the same commit but
gives it a friendlier name.

As discussed in <<_git_basics_chapter>>, there are two types of tags -- annotated and lightweight.
You can make a lightweight tag by running something like

[source,console]
----
$ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d
----

That's all a lightweight tag is -- a reference that never moves. An annotated tag is more complex, however.
If you create an annotated tag, Git creates a tag object and then writes a reference to point to it
rather than directly to the commit. You see this by creating an annotated tag (`-a` specifies that it's
an annotated tag).

[source,console]
----
$ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m 'test tag'
----

Here's the SHA-1 hash of the created object.

[source,console]
----
$ cat .git/refs/tags/v1.1
9585191f37f7b0fb9444f35a9bf50de191beadc2
----

Now, run `git cat-file` on that SHA-1 hash.

[source,console]
----
$ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2
object 1a410efbd13591db07496601ebc7a059dd55cfe9
type commit
tag v1.1
tagger Scott Chacon <schacon@gmail.com> Sat May 23 16:48:58 2009 -0700

test tag
----

Notice that the object entry points to the commit SHA-1 hash that you tagged.
Also notice that it doesn't need to point to a commit -- you can tag any Git object.
In the Git source code, for example, the maintainer has added his GPG public key as a blob object and then tagged it.
You can view the public key by running this in a clone of the Git repository.

[source,console]
----
$ git cat-file blob junio-gpg-pub
----

The Linux kernel repository also has a non-commit-pointing tag object -- the first tag created points
to the initial tree of the import of the source code.

==== Remotes

The third type of reference is a remote reference.
If you add a remote and push to it, Git stores the commit you last pushed to each branch in that remote
in the `refs/remotes` directory. For instance, you can add a remote called `origin` and push your `master` to it.

[source,console]
----
$ git remote add origin git@github.com:schacon/simplegit-progit.git
$ git push origin master
Counting objects: 11, done.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (7/7), 716 bytes, done.
Total 7 (delta 2), reused 4 (delta 1)
To git@github.com:schacon/simplegit-progit.git
  a11bef0..ca82a6d  master -> master
----

Then, you can see what `master` on the `origin` remote was the last time you communicated with the
remote server by looking at the `refs/remotes/origin/master` file.

[source,console]
----
$ cat .git/refs/remotes/origin/master
ca82a6dff817ec66f44342007202690a93763949
----

Remote references differ from branches (`refs/heads` references) mainly in that they're considered read-only.
You can run `git checkout` to one, but Git doesn't point `HEAD` at one, so you never update it by running `git commit`.
Git manages them as bookmarks to the last known state of where those branches were on those servers.
