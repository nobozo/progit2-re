[[_git_powershell]]
=== Git in PowerShell

(((powershell)))(((tab completion, powershell)))(((shell prompts, powershell)))
(((posh-git)))
The legacy command-line terminal on Windows (`cmd.exe`) isn't really capable of a customized Git experience,
but if you're using PowerShell, you're in luck.
This also works if you're running PowerShell on a non-Windows platform like Debian.
A package called Posh-Git (https://github.com/dahlbyk/posh-git[]) provides powerful tab-completion facilities,
as well as an enhanced prompt to help you stay on top of your repository status. It looks like

.PowerShell with Posh-git.
image::images/posh-git.png[PowerShell with Posh-git.]

==== Installation
===== Prerequisites (Windows only)
Before you're able to run PowerShell scripts on your machine, you need to set your local ExecutionPolicy to
RemoteSigned (Basically anything except Undefined and Restricted). If you choose AllSigned instead of RemoteSigned,
local scripts (your own) also need to be digitally signed in order to be executed. With RemoteSigned,
only Scripts having the "ZoneIdentifier" set to Internet (were downloaded from the web) need to be signed. Others don't.
If you're an administrator and want to set it for all Users on that machine, use "-Scope LocalMachine".
If you're a normal user, without administrative rights, you can use "-Scope CurrentUser" to set it only for you.

More about PowerShell Scopes: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_scopes[]

More about PowerShell ExecutionPolicy: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy[]

[source,powershell]
-----
> Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy RemoteSigned -Force
-----

===== PowerShell Gallery
If you have at least PowerShell 5 or PowerShell 4 with PackageManagement installed, you can use the package
manager to fetch Posh-Git.

More information about PowerShell Gallery: https://docs.microsoft.com/en-us/powershell/gallery/overview[]
[source,powershell]
-----
> Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
> Update-Module PowerShellGet -Force
> Install-Module Posh-Git -Scope AllUsers
-----
To install Posh-Git only for the current user and not globally, use "-Scope CurrentUser" instead.
If the second command fails with an error like `Module 'PowerShellGet' was not installed by using Install-Module`,
you'll need to run another command first:

[source,powershell]
----
> Install-Module PowerShellGet -Force -SkipPublisherCheck
----

Then you can go back and try again.
This happens because the modules that ship with Windows PowerShell are signed with a different
certificate.

===== Update PowerShell Prompt
To include Git information in your prompt, Posh-Git needs to be imported. To do this automatically,
include the import statement into your $profile script. This script is executed everytime you open a new
PowerShell prompt. Keep in mind that there are multiple $profile scripts -- one for the console and
a separate one for the ISE.
[source,powershell]
-----
> New-Item -Name $(Split-Path -Path $profile) -ItemType Directory -Force
> 'Import-Module Posh-Git' | Out-File -Append -Encoding default -FilePath $profile
-----

===== From Source
Just download the Posh-Git release from (https://github.com/dahlbyk/posh-git[]), and uncompress it to the
`WindowsPowershell` directory. Then open PowerShell as an administrator, and run
[source,powershell]
-----
> cd ~\Documents\WindowsPowerShell\Module\posh-git
> .\install.ps1
-----

This adds the proper line to your `profile.ps1` file, and Posh-Git runs the next time you start PowerShell.
